{"ast":null,"code":"var _jsxFileName = \"D:\\\\gas-station-report\\\\src\\\\GasStationReport.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [startTime, setStartTime] = useState(\"00:00\");\n  const [endTime, setEndTime] = useState(\"23:59\");\n  const [totalAmount, setTotalAmount] = useState(0);\n  const loadExcelData = async () => {\n    const response = await fetch(\"/file-report.xlsx\"); // Đường dẫn tới file Excel trong thư mục public\n    const data = await response.arrayBuffer();\n    const workbook = XLSX.read(data, {\n      type: \"array\"\n    });\n    const firstSheetName = workbook.SheetNames[0];\n    const worksheet = workbook.Sheets[firstSheetName];\n    const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n      header: 1\n    });\n\n    // Trích xuất dữ liệu từ dòng 9 trở đi (theo cấu trúc file Excel bạn cung cấp)\n    const formattedData = jsonData.slice(8).map(row => {\n      const date = row[1]; // Cột \"Ngày\" (21/03/2024)\n      const time = row[2]; // Cột \"Giờ\" (HH:mm:ss)\n      let amount = row[8]; // Cột \"Thành tiền\"\n\n      // Kiểm tra nếu amount tồn tại và là chuỗi, thực hiện replace nếu đúng\n      if (amount && typeof amount === \"string\") {\n        amount = parseFloat(amount.replace(/,/g, \"\"));\n      }\n\n      // Kết hợp ngày và giờ\n      const dateTime = new Date(`${date}T${time}`);\n      return {\n        dateTime,\n        amount: amount || 0 // Nếu amount không tồn tại hoặc null, gán giá trị 0\n      };\n    });\n    setTransactions(formattedData);\n  };\n  useEffect(() => {\n    loadExcelData();\n  }, []);\n  const calculateTotalAmount = () => {\n    const start = new Date(`1970-01-01T${startTime}:00`); // Thời gian bắt đầu\n    const end = new Date(`1970-01-01T${endTime}:00`); // Thời gian kết thúc\n\n    const total = transactions.reduce((sum, transaction) => {\n      const transactionTime = new Date(transaction.dateTime);\n      // Kiểm tra xem thời gian giao dịch nằm trong khoảng thời gian đã nhập hay không\n      if (transactionTime >= start && transactionTime <= end) {\n        return sum + transaction.amount; // Cộng dồn thành tiền\n      }\n      return sum;\n    }, 0);\n    setTotalAmount(total); // Cập nhật tổng thành tiền\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"T\\u1ED5ng th\\xE0nh ti\\u1EC1n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Th\\u1EDDi gian b\\u1EAFt \\u0111\\u1EA7u:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: startTime,\n        onChange: e => setStartTime(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Th\\u1EDDi gian k\\u1EBFt th\\xFAc:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: endTime,\n        onChange: e => setEndTime(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: calculateTotalAmount,\n      children: \"T\\xEDnh t\\u1ED5ng\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"T\\u1ED5ng th\\xE0nh ti\\u1EC1n: \", totalAmount.toLocaleString(), \" VN\\u0110\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"B2hwAqYrZcYxv03AzIUm2zHMYlk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","XLSX","jsxDEV","_jsxDEV","App","_s","transactions","setTransactions","startTime","setStartTime","endTime","setEndTime","totalAmount","setTotalAmount","loadExcelData","response","fetch","data","arrayBuffer","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","header","formattedData","slice","map","row","date","time","amount","parseFloat","replace","dateTime","Date","calculateTotalAmount","start","end","total","reduce","sum","transaction","transactionTime","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","onClick","toLocaleString","_c","$RefreshReg$"],"sources":["D:/gas-station-report/src/GasStationReport.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst App = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [startTime, setStartTime] = useState(\"00:00\");\r\n  const [endTime, setEndTime] = useState(\"23:59\");\r\n  const [totalAmount, setTotalAmount] = useState(0);\r\n\r\n  const loadExcelData = async () => {\r\n    const response = await fetch(\"/file-report.xlsx\"); // Đường dẫn tới file Excel trong thư mục public\r\n    const data = await response.arrayBuffer();\r\n\r\n    const workbook = XLSX.read(data, { type: \"array\" });\r\n    const firstSheetName = workbook.SheetNames[0];\r\n    const worksheet = workbook.Sheets[firstSheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\r\n\r\n    // Trích xuất dữ liệu từ dòng 9 trở đi (theo cấu trúc file Excel bạn cung cấp)\r\n    const formattedData = jsonData.slice(8).map(row => {\r\n      const date = row[1]; // Cột \"Ngày\" (21/03/2024)\r\n      const time = row[2]; // Cột \"Giờ\" (HH:mm:ss)\r\n      let amount = row[8]; // Cột \"Thành tiền\"\r\n\r\n      // Kiểm tra nếu amount tồn tại và là chuỗi, thực hiện replace nếu đúng\r\n      if (amount && typeof amount === \"string\") {\r\n        amount = parseFloat(amount.replace(/,/g, \"\"));\r\n      }\r\n\r\n      // Kết hợp ngày và giờ\r\n      const dateTime = new Date(`${date}T${time}`);\r\n      return {\r\n        dateTime,\r\n        amount: amount || 0 // Nếu amount không tồn tại hoặc null, gán giá trị 0\r\n      };\r\n    });\r\n\r\n    setTransactions(formattedData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadExcelData();\r\n  }, []);\r\n\r\n  const calculateTotalAmount = () => {\r\n    const start = new Date(`1970-01-01T${startTime}:00`); // Thời gian bắt đầu\r\n    const end = new Date(`1970-01-01T${endTime}:00`); // Thời gian kết thúc\r\n\r\n    const total = transactions.reduce((sum, transaction) => {\r\n      const transactionTime = new Date(transaction.dateTime);\r\n      // Kiểm tra xem thời gian giao dịch nằm trong khoảng thời gian đã nhập hay không\r\n      if (transactionTime >= start && transactionTime <= end) {\r\n        return sum + transaction.amount; // Cộng dồn thành tiền\r\n      }\r\n      return sum;\r\n    }, 0);\r\n\r\n    setTotalAmount(total); // Cập nhật tổng thành tiền\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\" }}>\r\n      <h1>Tổng thành tiền</h1>\r\n      <div>\r\n        <label>Thời gian bắt đầu:</label>\r\n        <input\r\n          type=\"time\"\r\n          value={startTime}\r\n          onChange={(e) => setStartTime(e.target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label>Thời gian kết thúc:</label>\r\n        <input\r\n          type=\"time\"\r\n          value={endTime}\r\n          onChange={(e) => setEndTime(e.target.value)}\r\n        />\r\n      </div>\r\n      <button onClick={calculateTotalAmount}>Tính tổng</button>\r\n      <h2>Tổng thành tiền: {totalAmount.toLocaleString()} VNĐ</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}